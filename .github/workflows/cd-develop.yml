name: CI/CD

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  # 1. 도커 이미지 빌드 및 푸시
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      - name: Docker build with latest tag
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:latest .

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:latest

  # 2. EC2에서 컨테이너 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Pull latest image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:latest

      - name: Stop existing container if any
        run: |
          CONTAINER_ID=$(sudo docker ps -q --filter "name=github-actions-demo")
          if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
          fi

      - name: Run new container
        run: |
          sudo docker run -d --rm \
            --name github-actions-demo \
            -p 8080:8080 \
            ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:latest

      - name: Prune unused docker resources
        run: sudo docker system prune -f


# name: CD - DEVELOP

# on:  #이 워크플로우가 언제 실행될지 트리거를 정의함.
#   pull_request:
#     types : [closed] #누군가가 Pull request를 닫았을 때 실행됨.
#   workflow_dispatch: #수동 실행도 가능하도록

# jobs: #실제 실행할 작업을 정의
#   build: #작업 이름
#     runs-on: ubuntu-latest #OS환경
#     if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'
#     #닫힌 Pull Request 중에서, 병합된 것이고, 병합 대상 브랜치가 develop 브랜치일 경우에만 이 작업을 실행
